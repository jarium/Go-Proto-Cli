// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v4.25.3
// source: gen/example_pb/example.proto

package example_pb

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationExampleExample = "/example.Example/Example"

type ExampleHTTPServer interface {
	Example(context.Context, *ExampleRequest) (*ExampleReply, error)
}

func RegisterExampleHTTPServer(s *http.Server, srv ExampleHTTPServer) {
	r := s.Route("/")
	r.GET("/example", _Example_Example0_HTTP_Handler(srv))
}

func _Example_Example0_HTTP_Handler(srv ExampleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ExampleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationExampleExample)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Example(ctx, req.(*ExampleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ExampleReply)
		return ctx.Result(200, reply)
	}
}

type ExampleHTTPClient interface {
	Example(ctx context.Context, req *ExampleRequest, opts ...http.CallOption) (rsp *ExampleReply, err error)
}

type ExampleHTTPClientImpl struct {
	cc *http.Client
}

func NewExampleHTTPClient(client *http.Client) ExampleHTTPClient {
	return &ExampleHTTPClientImpl{client}
}

func (c *ExampleHTTPClientImpl) Example(ctx context.Context, in *ExampleRequest, opts ...http.CallOption) (*ExampleReply, error) {
	var out ExampleReply
	pattern := "/example"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationExampleExample))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
